var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _eventMap;
class EventsHandler {
  constructor() {
    __privateAdd(this, _eventMap, void 0);
    __privateSet(this, _eventMap, /* @__PURE__ */ new Map());
  }
  add(type, listener) {
    var _a;
    if (!__privateGet(this, _eventMap).has(type)) {
      __privateGet(this, _eventMap).set(type, /* @__PURE__ */ new Set());
    }
    (_a = __privateGet(this, _eventMap).get(type)) == null ? void 0 : _a.add(listener);
  }
  start(type) {
    if (__privateGet(this, _eventMap).has(type)) {
      for (const event of __privateGet(this, _eventMap).get(type)) {
        window.addEventListener(type, event);
      }
    }
  }
  stop(type) {
    if (__privateGet(this, _eventMap).has(type)) {
      for (const event of __privateGet(this, _eventMap).get(type)) {
        window.removeEventListener(type, event);
      }
    }
  }
  startAll() {
    for (const type of __privateGet(this, _eventMap).keys()) {
      this.start(type);
    }
  }
  stopAll() {
    for (const type of __privateGet(this, _eventMap).keys()) {
      this.stop(type);
    }
  }
  clear() {
    __privateGet(this, _eventMap).clear();
  }
}
_eventMap = new WeakMap();
function isMobile() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}
function isTouchEvent(event) {
  if (event.touches) {
    return true;
  }
  return false;
}
class Random {
  static randomFloat(start, end) {
    return Math.random() * (end - start) + start;
  }
  static randomInt(start, end) {
    return Math.floor(Random.randomFloat(start, end));
  }
  static choice(range) {
    const length = range.length;
    const randomIndex = Math.floor(length * Math.random());
    return range[randomIndex];
  }
  static color(colorHexStringOrArray = "0123456789ABCDEF") {
    return "#" + Random.choice(colorHexStringOrArray) + Random.choice(colorHexStringOrArray) + Random.choice(colorHexStringOrArray) + Random.choice(colorHexStringOrArray) + Random.choice(colorHexStringOrArray) + Random.choice(colorHexStringOrArray);
  }
}
function showBadge(appName, {
  leftColor = "#fff",
  rightColor = "#444",
  leftBgColor = "#35495e",
  rightBgColor = "#00ffc0"
} = {}) {
  console.log(`%c ${appName} %c v${"0.3.3"} ${"a117dec"} %c`, `background: ${leftBgColor}; padding: 2px; color: ${leftColor}; font-weight: bold; text-transform: uppercase;`, `background: ${rightBgColor}; padding: 2px; color: ${rightColor}; font-weight: bold; text-transform: uppercase;`, "background: transparent");
}
export { EventsHandler, Random, isMobile, isTouchEvent, showBadge };
